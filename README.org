* cl-naive-code-analyzer

cl-naive-code-analyzer is a Common Lisp library designed analyze the
code Lisp projects. Most of the analysis is static, very little
runtime information is used.

* cl-naive-code-analyzer

cl-naive-code-analyzer is a Common Lisp library designed to statically
analyze one or more Lisp projects by extracting function and macro
definitions, call relationships, lambda lists, and variable usage
directly from source code. It performs structural parsing using
Eclector and stores analysis results for efficient querying across
project boundaries. Its primary goals are to support AI-assisted
context discovery, dead code detection, and future inference of
architectural patterns.

*WARNING:* The code was written by ChatGPT-4o, then hacked by ChatGPT
codex and is now mostly in the hands of Google Jules.

*STATUS:* Late Pre-Alpha / Early Alpha

The project has a solid foundational implementation for parsing and analyzing many Common Lisp definition types. Core features supporting code navigation, documentation data extraction, and basic dependency analysis are in place. A comprehensive test suite exists and largely passes.

However, active development and refinement are ongoing. Expect breaking changes as the system matures. Key areas for improvement include:
 - *Address Test Failures:* Resolve the 8 failing tests and 1 error identified in the current test suite to improve stability.
 - *Enhance Robustness & Error Handling:* Implement more comprehensive error handling throughout the parsing and analysis process, particularly for ASDF operations, malformed code, and edge cases in CST manipulation. Systematically address TODO comments related to robustness.
 - *Complete Feature Implementation:*
    - Fully implement robust handling of read-time evaluation (`#.`) and feature expressions (`#+`, `#-`) beyond current placeholders.
    - Improve the depth of analysis for complex forms (e.g., detailed slot options in `DEFCLASS`/`DEFSTRUCT`, advanced `DEFPACKAGE` clauses like `:shadowing-import-from`, `DEFSETF` parameter parsing).
    - Make dead code detection (`uncalled-functions`) more reliable by accounting for indirect calls (apply, funcall), exports, and entry points.
 - *Refine Core Components:*
    - Review and potentially refactor complex areas like CST walkers (`walk-cst`, `walk-cst-with-context`) and the Eclector client customizations for clarity, efficiency, and correctness.
    - Consolidate or clarify roles of potentially duplicated functionality (e.g., `init-project` in `query.lisp` vs. `init-project-store` in `naive-store.lisp`).
 - *Improve Querying and Analysis:*
    - Add more sophisticated predefined queries and analytical capabilities beyond direct call/definition retrieval.
 - *Documentation and Examples:*
    - Continue improving inline docstrings and overall documentation.
    - Provide more usage examples and tutorials.
    - Add file-level summary docstrings.
 - *Address General TODOs:* Systematically work through the numerous TODO comments scattered throughout the codebase to refine and complete pending tasks.
 - *cl-naive-store Integration:* Review and finalize `cl-naive-store` integration, ensuring cleanup, safety checks, and optimized loading post-analysis.

/* You need code that compiles and can be loaded. The library loads
the project before analysis is started to help fill in some gaps with
the purely static approach. But once the analysis meta data is
harvested you only need to load the store to query the information.
 
** Alternatives Availabe to [project name]

There are other alternatives but I wanted to learn about code
analyzers and push ChatGPT to its limits.

Right now I am to lazy to look them up and do the diffs for
you. Besides I have lots of other pressing todos on this project.

** Design



** Use Cases

Use Cases for cl-naive-code-analyzer:

 - AI Code Context: Retrieve relevant and related source code across
   multiple projects to provide meaningful context to AI tools like
   code assistants or reviewers.

 - Dead Code Detection: Identify unused functions, methods, or macros
   by analyzing call graphs and reference chains.

 - Code Navigation & Search: Build powerful IDE features like
   cross-referencing, jump-to-definition, or usage tracking across
   multi-project systems.

 - Dependency Analysis: Understand how functions and macros depend on
   one another for refactoring or modularization.

 - Documentation Extraction: Generate human-readable summaries or API
   docs from extracted form metadata, lambda lists, and docstrings.

 - Design Inference (Future): Analyze architecture-level patterns,
   usage conventions, or project design idioms based on symbolic
   structure.

These features make it useful for tooling, auditing, documentation,
and AI-assisted development workflows.


** Documentation

[[file:docs/docs.org][Documentation]] can be found in the docs folder in the repository.


** Tutorials

Simple step by step [[file:docs/tutorials.org][tutorial(s)]] to get you started fast.

** How To(s)

How to do different things can be found [[file:docs/how-tos.org][here]].

*** Quick & Dirty
#+BEGIN_SRC lisp
(index-project-definitions "test-code" "~/source/naive/cl-naive-code-analyzer/tests/test-code/")
#+END_SRC

** Dependencies

- eclector
- concrete-syntax-trees
- trivial-gray-streams
- cl-naive-store


** Supported CL Implementations

Should support all compliant implementations, no implementation
specific code was used.


``````
** Tests

To load and run the tests, clone the project and then:

#+BEGIN_SRC lisp
  (ql:quickload :cl-naive-code-analyzer.tests)

  (cl-naive-tests:report (cl-naive-tests:run))
#+END_SRC
